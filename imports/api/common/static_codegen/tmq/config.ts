/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tmq/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class SmartiesAssistantConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_human_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_human_url" in data && data.is_human_url != undefined) {
                    this.is_human_url = data.is_human_url;
                }
            }
        }
        get is_human_url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set is_human_url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_human_url?: string;
        }): SmartiesAssistantConfig {
            const message = new SmartiesAssistantConfig({});
            if (data.is_human_url != null) {
                message.is_human_url = data.is_human_url;
            }
            return message;
        }
        toObject() {
            const data: {
                is_human_url?: string;
            } = {};
            if (this.is_human_url != null) {
                data.is_human_url = this.is_human_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_human_url.length)
                writer.writeString(1, this.is_human_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartiesAssistantConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartiesAssistantConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_human_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartiesAssistantConfig {
            return SmartiesAssistantConfig.deserialize(bytes);
        }
    }
    export class ClientConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            smarties_assistant?: SmartiesAssistantConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("smarties_assistant" in data && data.smarties_assistant != undefined) {
                    this.smarties_assistant = data.smarties_assistant;
                }
            }
        }
        get smarties_assistant() {
            return pb_1.Message.getWrapperField(this, SmartiesAssistantConfig, 1) as SmartiesAssistantConfig;
        }
        set smarties_assistant(value: SmartiesAssistantConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_smarties_assistant() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            smarties_assistant?: ReturnType<typeof SmartiesAssistantConfig.prototype.toObject>;
        }): ClientConfig {
            const message = new ClientConfig({});
            if (data.smarties_assistant != null) {
                message.smarties_assistant = SmartiesAssistantConfig.fromObject(data.smarties_assistant);
            }
            return message;
        }
        toObject() {
            const data: {
                smarties_assistant?: ReturnType<typeof SmartiesAssistantConfig.prototype.toObject>;
            } = {};
            if (this.smarties_assistant != null) {
                data.smarties_assistant = this.smarties_assistant.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_smarties_assistant)
                writer.writeMessage(1, this.smarties_assistant, () => this.smarties_assistant.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.smarties_assistant, () => message.smarties_assistant = SmartiesAssistantConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientConfig {
            return ClientConfig.deserialize(bytes);
        }
    }
    export class AuthConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
        }): AuthConfig {
            const message = new AuthConfig({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthConfig {
            return AuthConfig.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client?: ClientConfig;
            auth?: AuthConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client" in data && data.client != undefined) {
                    this.client = data.client;
                }
                if ("auth" in data && data.auth != undefined) {
                    this.auth = data.auth;
                }
            }
        }
        get client() {
            return pb_1.Message.getWrapperField(this, ClientConfig, 1) as ClientConfig;
        }
        set client(value: ClientConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_client() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get auth() {
            return pb_1.Message.getWrapperField(this, AuthConfig, 2) as AuthConfig;
        }
        set auth(value: AuthConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            client?: ReturnType<typeof ClientConfig.prototype.toObject>;
            auth?: ReturnType<typeof AuthConfig.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (data.client != null) {
                message.client = ClientConfig.fromObject(data.client);
            }
            if (data.auth != null) {
                message.auth = AuthConfig.fromObject(data.auth);
            }
            return message;
        }
        toObject() {
            const data: {
                client?: ReturnType<typeof ClientConfig.prototype.toObject>;
                auth?: ReturnType<typeof AuthConfig.prototype.toObject>;
            } = {};
            if (this.client != null) {
                data.client = this.client.toObject();
            }
            if (this.auth != null) {
                data.auth = this.auth.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_client)
                writer.writeMessage(1, this.client, () => this.client.serialize(writer));
            if (this.has_auth)
                writer.writeMessage(2, this.auth, () => this.auth.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.client, () => message.client = ClientConfig.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.auth, () => message.auth = AuthConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    export class GetClientConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetClientConfigRequest {
            const message = new GetClientConfigRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetClientConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetClientConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetClientConfigRequest {
            return GetClientConfigRequest.deserialize(bytes);
        }
    }
    export class GetClientConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config?: Config;
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get config() {
            return pb_1.Message.getWrapperField(this, Config, 1) as Config;
        }
        set config(value: Config) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            config?: ReturnType<typeof Config.prototype.toObject>;
            success?: boolean;
            error_message?: string;
        }): GetClientConfigResponse {
            const message = new GetClientConfigResponse({});
            if (data.config != null) {
                message.config = Config.fromObject(data.config);
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                config?: ReturnType<typeof Config.prototype.toObject>;
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_config)
                writer.writeMessage(1, this.config, () => this.config.serialize(writer));
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.error_message.length)
                writer.writeString(3, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetClientConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetClientConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.config, () => message.config = Config.deserialize(reader));
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetClientConfigResponse {
            return GetClientConfigResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedConfigServiceService {
        static definition = {
            GetClientConfig: {
                path: "/tmq.ConfigService/GetClientConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetClientConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetClientConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetClientConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetClientConfigResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetClientConfig(call: grpc_1.ServerUnaryCall<GetClientConfigRequest, GetClientConfigResponse>, callback: grpc_1.sendUnaryData<GetClientConfigResponse>): void;
    }
    export class ConfigServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedConfigServiceService.definition, "ConfigService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetClientConfig: GrpcUnaryServiceInterface<GetClientConfigRequest, GetClientConfigResponse> = (message: GetClientConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetClientConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetClientConfigResponse>, callback?: grpc_1.requestCallback<GetClientConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.GetClientConfig(message, metadata, options, callback);
        };
    }
}
