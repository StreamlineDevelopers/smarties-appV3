/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: tmq/inbox.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tmq {
    export class GetInboxRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            business_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
            }
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            business_id?: string;
        }): GetInboxRequest {
            const message = new GetInboxRequest({});
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            return message;
        }
        toObject() {
            const data: {
                business_id?: string;
            } = {};
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.business_id.length)
                writer.writeString(1, this.business_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInboxRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInboxRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.business_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInboxRequest {
            return GetInboxRequest.deserialize(bytes);
        }
    }
    export class Inbox extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            business_id?: string;
            consumer_id?: string;
            channel_id?: string;
            status?: string;
            assignee_id?: string;
            locked_at?: number;
            unread_for_assignee?: number;
            latest_interaction_id?: string;
            latest_snippet?: string;
            latest_at?: number;
            latest_direction?: string;
            created_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("business_id" in data && data.business_id != undefined) {
                    this.business_id = data.business_id;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("assignee_id" in data && data.assignee_id != undefined) {
                    this.assignee_id = data.assignee_id;
                }
                if ("locked_at" in data && data.locked_at != undefined) {
                    this.locked_at = data.locked_at;
                }
                if ("unread_for_assignee" in data && data.unread_for_assignee != undefined) {
                    this.unread_for_assignee = data.unread_for_assignee;
                }
                if ("latest_interaction_id" in data && data.latest_interaction_id != undefined) {
                    this.latest_interaction_id = data.latest_interaction_id;
                }
                if ("latest_snippet" in data && data.latest_snippet != undefined) {
                    this.latest_snippet = data.latest_snippet;
                }
                if ("latest_at" in data && data.latest_at != undefined) {
                    this.latest_at = data.latest_at;
                }
                if ("latest_direction" in data && data.latest_direction != undefined) {
                    this.latest_direction = data.latest_direction;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get business_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set business_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get assignee_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set assignee_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get locked_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set locked_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get unread_for_assignee() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set unread_for_assignee(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get latest_interaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set latest_interaction_id(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get latest_snippet() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set latest_snippet(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get latest_at() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set latest_at(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get latest_direction() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set latest_direction(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            id?: string;
            business_id?: string;
            consumer_id?: string;
            channel_id?: string;
            status?: string;
            assignee_id?: string;
            locked_at?: number;
            unread_for_assignee?: number;
            latest_interaction_id?: string;
            latest_snippet?: string;
            latest_at?: number;
            latest_direction?: string;
            created_at?: number;
        }): Inbox {
            const message = new Inbox({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.business_id != null) {
                message.business_id = data.business_id;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.assignee_id != null) {
                message.assignee_id = data.assignee_id;
            }
            if (data.locked_at != null) {
                message.locked_at = data.locked_at;
            }
            if (data.unread_for_assignee != null) {
                message.unread_for_assignee = data.unread_for_assignee;
            }
            if (data.latest_interaction_id != null) {
                message.latest_interaction_id = data.latest_interaction_id;
            }
            if (data.latest_snippet != null) {
                message.latest_snippet = data.latest_snippet;
            }
            if (data.latest_at != null) {
                message.latest_at = data.latest_at;
            }
            if (data.latest_direction != null) {
                message.latest_direction = data.latest_direction;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                business_id?: string;
                consumer_id?: string;
                channel_id?: string;
                status?: string;
                assignee_id?: string;
                locked_at?: number;
                unread_for_assignee?: number;
                latest_interaction_id?: string;
                latest_snippet?: string;
                latest_at?: number;
                latest_direction?: string;
                created_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.business_id != null) {
                data.business_id = this.business_id;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.assignee_id != null) {
                data.assignee_id = this.assignee_id;
            }
            if (this.locked_at != null) {
                data.locked_at = this.locked_at;
            }
            if (this.unread_for_assignee != null) {
                data.unread_for_assignee = this.unread_for_assignee;
            }
            if (this.latest_interaction_id != null) {
                data.latest_interaction_id = this.latest_interaction_id;
            }
            if (this.latest_snippet != null) {
                data.latest_snippet = this.latest_snippet;
            }
            if (this.latest_at != null) {
                data.latest_at = this.latest_at;
            }
            if (this.latest_direction != null) {
                data.latest_direction = this.latest_direction;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.business_id.length)
                writer.writeString(2, this.business_id);
            if (this.consumer_id.length)
                writer.writeString(3, this.consumer_id);
            if (this.channel_id.length)
                writer.writeString(4, this.channel_id);
            if (this.status.length)
                writer.writeString(5, this.status);
            if (this.assignee_id.length)
                writer.writeString(6, this.assignee_id);
            if (this.locked_at != 0)
                writer.writeDouble(7, this.locked_at);
            if (this.unread_for_assignee != 0)
                writer.writeInt32(8, this.unread_for_assignee);
            if (this.latest_interaction_id.length)
                writer.writeString(9, this.latest_interaction_id);
            if (this.latest_snippet.length)
                writer.writeString(10, this.latest_snippet);
            if (this.latest_at != 0)
                writer.writeDouble(11, this.latest_at);
            if (this.latest_direction.length)
                writer.writeString(12, this.latest_direction);
            if (this.created_at != 0)
                writer.writeDouble(13, this.created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Inbox {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Inbox();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.business_id = reader.readString();
                        break;
                    case 3:
                        message.consumer_id = reader.readString();
                        break;
                    case 4:
                        message.channel_id = reader.readString();
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    case 6:
                        message.assignee_id = reader.readString();
                        break;
                    case 7:
                        message.locked_at = reader.readDouble();
                        break;
                    case 8:
                        message.unread_for_assignee = reader.readInt32();
                        break;
                    case 9:
                        message.latest_interaction_id = reader.readString();
                        break;
                    case 10:
                        message.latest_snippet = reader.readString();
                        break;
                    case 11:
                        message.latest_at = reader.readDouble();
                        break;
                    case 12:
                        message.latest_direction = reader.readString();
                        break;
                    case 13:
                        message.created_at = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Inbox {
            return Inbox.deserialize(bytes);
        }
    }
    export class GetInboxResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inboxes?: Inbox[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inboxes" in data && data.inboxes != undefined) {
                    this.inboxes = data.inboxes;
                }
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get inboxes() {
            return pb_1.Message.getRepeatedWrapperField(this, Inbox, 1) as Inbox[];
        }
        set inboxes(value: Inbox[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            inboxes?: ReturnType<typeof Inbox.prototype.toObject>[];
            total_count?: number;
            success?: boolean;
            error_message?: string;
        }): GetInboxResponse {
            const message = new GetInboxResponse({});
            if (data.inboxes != null) {
                message.inboxes = data.inboxes.map(item => Inbox.fromObject(item));
            }
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                inboxes?: ReturnType<typeof Inbox.prototype.toObject>[];
                total_count?: number;
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.inboxes != null) {
                data.inboxes = this.inboxes.map((item: Inbox) => item.toObject());
            }
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inboxes.length)
                writer.writeRepeatedMessage(1, this.inboxes, (item: Inbox) => item.serialize(writer));
            if (this.total_count != 0)
                writer.writeInt32(2, this.total_count);
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInboxResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInboxResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inboxes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Inbox.deserialize(reader), Inbox));
                        break;
                    case 2:
                        message.total_count = reader.readInt32();
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetInboxResponse {
            return GetInboxResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedInboxServiceService {
        static definition = {
            GetInbox: {
                path: "/tmq.InboxService/GetInbox",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetInboxRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetInboxRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetInboxResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetInboxResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetInbox(call: grpc_1.ServerUnaryCall<GetInboxRequest, GetInboxResponse>, callback: grpc_1.sendUnaryData<GetInboxResponse>): void;
    }
    export class InboxServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedInboxServiceService.definition, "InboxService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetInbox: GrpcUnaryServiceInterface<GetInboxRequest, GetInboxResponse> = (message: GetInboxRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetInboxResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetInboxResponse>, callback?: grpc_1.requestCallback<GetInboxResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInbox(message, metadata, options, callback);
        };
    }
}
