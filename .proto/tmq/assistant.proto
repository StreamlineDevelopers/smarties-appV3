syntax = "proto3";

option optimize_for = CODE_SIZE;

package tmq;

message AssistantRequest {
    string name = 1;
    string voiceProvider = 2;
    string voice = 3;
    string modelProvider = 4;
    string model = 5;
    string userId = 6;
    string assistantId = 7;
    string assistantIdLlm = 8;
}

message AssistantResponse {
    bool success = 1;
    string message = 2;
}

message Query {
    string userId = 1;   
    string keywords = 2;
}

message FetchAssistantRequest {
    int64 lastBasis = 1;
    Query query = 2;
}

message AllAssistants {
    string name = 1;
    string voiceProvider = 2;
    string voice = 3;
    string modelProvider = 4;
    string model = 5;
    string id = 6;   
    string assistantId = 7;
    string assistantIdLlm = 8;
    repeated Functions functions = 9;
    string kbId = 10;
    string firstMessage = 11;
    string systemPrompt = 12;
    string kbCollectionId = 13;
    repeated string toolIds = 14;
    int64 createdAt = 15;
    int64 updatedAt = 16;
}

message FetchAssistantResponse {
   repeated AllAssistants assistants = 1;
   int64 lastBasis = 2;
}

message Properties {
    string type = 1;
}

message Parameters {
    map<string, Properties> properties = 1;
    repeated string required = 2;
    string type = 3;
}

message Functions {
    string name = 1;
    bool async = 2;
    string description = 3;
    Parameters parameters = 4;
    string serverUrl = 5;
}

message UpdateAssistantRequest {
    string name = 1;
    string voiceProvider = 2;
    string voice = 3;
    string modelProvider = 4;
    string model = 5;
    string assistantId = 6;
    string assistantIdLlm = 7;
    repeated Functions functions = 8;
    string kbId = 9;
    string firstMessage = 10;
    string systemPrompt = 11;
    string kbCollectionId = 12;
    repeated string toolIds = 13;
    string userId = 14;
}

message AssistantConfigRequest {
}

message AssistantConfigResponse {
    string apiKey = 1;
    string serverUrl = 2;
}

message AllVoices {
    string id = 1;
    string name = 2;
    string provider = 3;
    string voiceId = 4;
}

message FetchVoicesRequest {
    string voiceProvider = 1;
}

message FetchVoicesResponse {
    repeated AllVoices voices = 1;
}

service AssistantService {
    rpc createAssistant (AssistantRequest) returns (AssistantResponse) {}
    rpc fetchAssistant (FetchAssistantRequest) returns (FetchAssistantResponse) {}
    rpc updateAssistant (UpdateAssistantRequest) returns (AssistantResponse) {}
    rpc fetchAssistantConfig (AssistantConfigRequest) returns (AssistantConfigResponse) {}
    rpc fetchVoices (FetchVoicesRequest) returns (FetchVoicesResponse) {}
}